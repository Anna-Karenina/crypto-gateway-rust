//! # –ï–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π
//!
//! –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è USDT —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤

use anyhow::Result;
use rust_decimal::Decimal;
use serde::{Deserialize, Serialize};
use std::time::{Duration, SystemTime, UNIX_EPOCH};
use tokio::time::interval;
use tracing::{info, warn};

use crate::infrastructure::tron::TronGridClient;

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct FeeConfig {
    // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∏—Å—Å–∏–π
    pub base_trx_per_transaction: Decimal,
    pub trx_to_usdt_rate: Decimal,
    pub commission_percentage: Decimal,
    pub min_commission_usdt: Decimal,
    pub max_commission_usdt: Decimal,

    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏
    pub dynamic_fees_enabled: bool,
    pub dynamic_min_fee: Decimal,
    pub dynamic_max_fee: Decimal,
    pub network_congestion_multiplier: Decimal,
    pub update_interval_minutes: u64,
}

impl Default for FeeConfig {
    fn default() -> Self {
        Self {
            // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            base_trx_per_transaction: Decimal::new(15, 0), // 15 TRX
            trx_to_usdt_rate: Decimal::new(10, 2),         // 0.10 USDT –∑–∞ TRX
            commission_percentage: Decimal::new(5, 1),     // 0.5%
            min_commission_usdt: Decimal::new(1, 0),       // 1 USDT
            max_commission_usdt: Decimal::new(10, 0),      // 10 USDT

            // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            dynamic_fees_enabled: true,
            dynamic_min_fee: Decimal::new(10, 0), // 10 TRX –º–∏–Ω–∏–º—É–º
            dynamic_max_fee: Decimal::new(50, 0), // 50 TRX –º–∞–∫—Å–∏–º—É–º
            network_congestion_multiplier: Decimal::new(15, 1), // 1.5x –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
            update_interval_minutes: 5,           // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        }
    }
}

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏ TRON
#[derive(Debug, Clone, Serialize)]
pub struct NetworkState {
    pub timestamp: u64,
    pub energy_price: Decimal,
    pub bandwidth_price: Decimal,
    pub congestion_level: CongestionLevel,
    pub recommended_fee_trx: Decimal,
}

/// –£—Ä–æ–≤–µ–Ω—å –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∏
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum CongestionLevel {
    Low,    // –ù–∏–∑–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    Medium, // –°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞
    High,   // –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π
#[derive(Debug, Clone, Serialize)]
pub struct FeeCalculationResult {
    pub gas_cost_usdt: Decimal,
    pub percentage_commission: Decimal,
    pub final_commission: Decimal,
    pub total_amount: Decimal,
    pub gas_fee_source: FeeSource,
}

/// –ò—Å—Ç–æ—á–Ω–∏–∫ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ –≥–∞–∑
#[derive(Debug, Clone, Serialize)]
pub enum FeeSource {
    Static,   // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç
    Dynamic,  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ç–∏
    Fallback, // –†–µ–∑–µ—Ä–≤–Ω—ã–π (–ø—Ä–∏ –æ—à–∏–±–∫–µ API)
}

/// –ï–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π
#[derive(Clone)]
pub struct UnifiedFeeService {
    config: FeeConfig,
    tron_client: TronGridClient,
    master_wallet_address: String,
    network_state: Option<NetworkState>,
}

impl UnifiedFeeService {
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
    pub fn new(
        config: FeeConfig,
        tron_client: TronGridClient,
        master_wallet_address: String,
    ) -> Self {
        Self {
            config,
            tron_client,
            master_wallet_address,
            network_state: None,
        }
    }

    /// –°–æ–∑–¥–∞–µ—Ç –∏–∑ —Å—Ç–∞—Ä–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    pub fn from_legacy_config(
        tron_client: TronGridClient,
        trx_per_transaction: Decimal,
        trx_to_usdt_rate: Decimal,
        commission_percentage: Decimal,
        min_commission_usdt: Decimal,
        max_commission_usdt: Decimal,
        master_wallet_address: String,
    ) -> Self {
        let config = FeeConfig {
            base_trx_per_transaction: trx_per_transaction,
            trx_to_usdt_rate,
            commission_percentage,
            min_commission_usdt,
            max_commission_usdt,
            ..Default::default()
        };

        Self::new(config, tron_client, master_wallet_address)
    }

    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏)
    pub async fn start_background_updates(&mut self) -> Result<()> {
        if !self.config.dynamic_fees_enabled {
            info!("üí∞ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç");
            return Ok(());
        }

        info!(
            "üí∞ –ó–∞–ø—É—Å–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–∏—Å—Å–∏–π (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {} –º–∏–Ω)",
            self.config.update_interval_minutes
        );

        let mut update_interval = interval(Duration::from_secs(
            self.config.update_interval_minutes * 60,
        ));

        loop {
            update_interval.tick().await;

            if let Err(e) = self.update_network_state().await {
                warn!("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏: {}", e);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–º–∏—Å—Å–∏—è–º–∏
            }
        }
    }

    /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ –≥–∞–∑ –≤ USDT
    pub async fn calculate_gas_fee(
        &mut self,
        from: &str,
        _to: &str,
        amount: Decimal,
    ) -> Result<Decimal> {
        // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç
        if self.config.dynamic_fees_enabled {
            match self.get_dynamic_gas_fee().await {
                Ok(fee) => {
                    tracing::info!("üí∞ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–æ–º–∏—Å—Å–∏—è –∑–∞ –≥–∞–∑: {} USDT", fee);
                    return Ok(fee);
                }
                Err(e) => {
                    warn!(
                        "‚ö†Ô∏è  –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –Ω–µ—É–¥–∞—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π: {}",
                        e
                    );
                }
            }
        }

        // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç (fallback)
        self.calculate_static_gas_fee(from, amount).await
    }

    /// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ –≥–∞–∑
    async fn get_dynamic_gas_fee(&mut self) -> Result<Decimal> {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if self.network_state.is_none() {
            self.update_network_state().await?;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (–Ω–µ —Å—Ç–∞—Ä—à–µ 10 –º–∏–Ω—É—Ç)
        if let Some(state) = &self.network_state {
            let now = SystemTime::now().duration_since(UNIX_EPOCH)?.as_secs();
            if now - state.timestamp > 600 {
                // 10 –º–∏–Ω—É—Ç
                self.update_network_state().await?;
            }
        }

        let fee_trx = self
            .network_state
            .as_ref()
            .map(|s| s.recommended_fee_trx)
            .unwrap_or(self.config.base_trx_per_transaction);

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º TRX –≤ USDT
        Ok(fee_trx * self.config.trx_to_usdt_rate)
    }

    /// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ –≥–∞–∑
    async fn calculate_static_gas_fee(&self, from: &str, amount: Decimal) -> Result<Decimal> {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É —ç–Ω–µ—Ä–≥–∏–∏
        match self
            .tron_client
            .estimate_energy(from, &self.master_wallet_address, amount)
            .await
        {
            Ok(energy_cost) => {
                tracing::info!("üí∞ –†–µ–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏: {} TRX", energy_cost);
                let gas_cost_usdt = Decimal::from(energy_cost) * self.config.trx_to_usdt_rate;
                Ok(gas_cost_usdt)
            }
            Err(e) => {
                tracing::warn!(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–∞–∑–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {}",
                    e
                );
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                let base_cost = self.config.base_trx_per_transaction * self.config.trx_to_usdt_rate;
                Ok(base_cost)
            }
        }
    }

    /// –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏
    pub fn calculate_percentage_commission(&self, amount: Decimal) -> Decimal {
        let commission = amount * self.config.commission_percentage / Decimal::new(100, 0);

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        commission
            .max(self.config.min_commission_usdt)
            .min(self.config.max_commission_usdt)
    }

    /// –ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—Å–µ—Ö –∫–æ–º–∏—Å—Å–∏–π –∏ –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã
    pub async fn calculate_total_amount(
        &mut self,
        order_amount: Decimal,
        from_wallet_address: &str,
    ) -> Result<(Decimal, Decimal, Decimal, Decimal)> {
        // 1. –ì–∞–∑–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è (–∫–ª–æ–Ω–∏—Ä—É–µ–º –º–∞—Å—Ç–µ—Ä –∞–¥—Ä–µ—Å)
        let master_wallet_address = self.master_wallet_address.clone();
        let gas_cost_usdt = self
            .calculate_gas_fee(from_wallet_address, &master_wallet_address, order_amount)
            .await?;

        // 2. –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è
        let percentage_commission = self.calculate_percentage_commission(order_amount);

        // 3. –ò—Ç–æ–≥–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è (–ø–æ–∫–∞ —Ä–∞–≤–Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ)
        let final_commission = percentage_commission;

        // 4. –û–±—â–∞—è —Å—É–º–º–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
        let total_amount = order_amount + gas_cost_usdt + final_commission;

        Ok((
            gas_cost_usdt,
            percentage_commission,
            final_commission,
            total_amount,
        ))
    }

    /// –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    pub async fn calculate_detailed_fees(
        &mut self,
        order_amount: Decimal,
        from_wallet_address: &str,
    ) -> Result<FeeCalculationResult> {
        let (gas_cost_usdt, percentage_commission, final_commission, total_amount) = self
            .calculate_total_amount(order_amount, from_wallet_address)
            .await?;

        let fee_source = if self.config.dynamic_fees_enabled && self.network_state.is_some() {
            FeeSource::Dynamic
        } else {
            FeeSource::Static
        };

        Ok(FeeCalculationResult {
            gas_cost_usdt,
            percentage_commission,
            final_commission,
            total_amount,
            gas_fee_source: fee_source,
        })
    }

    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏
    async fn update_network_state(&mut self) -> Result<()> {
        info!("üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è TRON —Å–µ—Ç–∏...");

        let timestamp = SystemTime::now().duration_since(UNIX_EPOCH)?.as_secs();

        // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ç–∏
        let (energy_price, bandwidth_price, congestion_level) =
            self.fetch_network_metrics().await?;

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é –∫–æ–º–∏—Å—Å–∏—é
        let recommended_fee_trx = self.calculate_dynamic_fee(&congestion_level, energy_price);

        let new_state = NetworkState {
            timestamp,
            energy_price,
            bandwidth_price,
            congestion_level,
            recommended_fee_trx,
        };

        info!(
            "üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏: {:?}, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∫–æ–º–∏—Å—Å–∏—è: {} TRX",
            new_state.congestion_level, new_state.recommended_fee_trx
        );

        self.network_state = Some(new_state);
        Ok(())
    }

    /// –ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
    async fn fetch_network_metrics(&self) -> Result<(Decimal, Decimal, CongestionLevel)> {
        // –°–∏–º—É–ª—è—Ü–∏—è: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
        let now = SystemTime::now().duration_since(UNIX_EPOCH)?.as_secs();
        let cycle = (now % 300) as f64 / 300.0; // 5-–º–∏–Ω—É—Ç–Ω—ã–π —Ü–∏–∫–ª

        let energy_price = Decimal::new(420, 0) + // –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ 420 sun
            Decimal::new((cycle * 200.0) as i64, 0); // +0-200 sun –≤–∞—Ä–∏–∞—Ü–∏—è

        let bandwidth_price = Decimal::new(1000, 0); // 1000 sun –∑–∞ bandwidth

        let congestion_level = match cycle {
            x if x < 0.3 => CongestionLevel::Low,
            x if x < 0.7 => CongestionLevel::Medium,
            _ => CongestionLevel::High,
        };

        Ok((energy_price, bandwidth_price, congestion_level))
    }

    /// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∫–æ–º–∏—Å—Å–∏—é
    fn calculate_dynamic_fee(
        &self,
        congestion_level: &CongestionLevel,
        energy_price: Decimal,
    ) -> Decimal {
        let base_fee = self.config.base_trx_per_transaction;

        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∏
        let congestion_multiplier = match congestion_level {
            CongestionLevel::Low => Decimal::new(8, 1),     // 0.8x
            CongestionLevel::Medium => Decimal::new(10, 1), // 1.0x
            CongestionLevel::High => self.config.network_congestion_multiplier, // 1.5x
        };

        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã —ç–Ω–µ—Ä–≥–∏–∏
        let energy_multiplier = if energy_price > Decimal::new(500, 0) {
            Decimal::new(12, 1) // 1.2x –µ—Å–ª–∏ —ç–Ω–µ—Ä–≥–∏—è –¥–æ—Ä–æ–≥–∞—è
        } else {
            Decimal::new(10, 1) // 1.0x
        };

        let calculated_fee = base_fee * congestion_multiplier * energy_multiplier;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        calculated_fee
            .max(self.config.dynamic_min_fee)
            .min(self.config.dynamic_max_fee)
    }

    /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    pub fn get_config(&self) -> &FeeConfig {
        &self.config
    }

    /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏
    pub fn get_network_state(&self) -> Option<&NetworkState> {
        self.network_state.as_ref()
    }

    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–º–∏—Å—Å–∏—è–º
    pub fn get_fee_stats(&self) -> FeeStats {
        FeeStats {
            config: self.config.clone(),
            network_state: self.network_state.clone(),
            dynamic_fees_active: self.config.dynamic_fees_enabled && self.network_state.is_some(),
        }
    }
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∏—Å—Å–∏–π
#[derive(Debug, Clone, Serialize)]
pub struct FeeStats {
    pub config: FeeConfig,
    pub network_state: Option<NetworkState>,
    pub dynamic_fees_active: bool,
}
