//! # –°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
//!
//! –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ USDT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤

use anyhow::Result;
use diesel::prelude::*;
use diesel_async::RunQueryDsl;
use rust_decimal::Decimal;
use std::collections::HashSet;
use tokio::time::{interval, Duration};
use tracing::{error, info, warn};

use crate::domain::{BlockchainTransaction, TransactionStatus};
use crate::infrastructure::database::{
    models::{IncomingTransactionModel, NewIncomingTransaction, WalletModel},
    schema, DbPool,
};
use crate::infrastructure::tron::TronGridClient;
use crate::utils::conversions::decimal_to_bigdecimal;

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
#[derive(Clone)]
pub struct TransactionMonitoringService {
    db: DbPool,
    tron_client: TronGridClient,
    usdt_contract: String,
    monitoring_enabled: bool,
}

impl TransactionMonitoringService {
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
    pub fn new(
        db: DbPool,
        tron_client: TronGridClient,
        usdt_contract: String,
        monitoring_enabled: bool,
    ) -> Self {
        Self {
            db,
            tron_client,
            usdt_contract,
            monitoring_enabled,
        }
    }

    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    pub async fn start_monitoring(&self) -> Result<()> {
        if !self.monitoring_enabled {
            info!("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
            return Ok(());
        }

        info!("üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Ö–æ–¥—è—â–∏—Ö USDT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...");

        let mut monitoring_interval = interval(Duration::from_secs(30)); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

        loop {
            monitoring_interval.tick().await;

            if let Err(e) = self.scan_for_incoming_transactions().await {
                error!("–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {}", e);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –Ω–µ –ø–∞–¥–∞–µ–º
            }
        }
    }

    /// –°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)
    pub async fn scan_for_incoming_transactions(&self) -> Result<()> {
        info!("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...");

        // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏
        let mut conn = self.db.get().await?;
        let wallets: Vec<WalletModel> = schema::wallets::table
            .select(WalletModel::as_select())
            .load(&mut conn)
            .await?;

        info!("–ù–∞–π–¥–µ–Ω–æ {} –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", wallets.len());

        // 2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        for wallet in wallets {
            if let Err(e) = self.scan_wallet_transactions(&wallet).await {
                warn!("–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ {}: {}", wallet.address, e);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ—à–µ–ª—å–∫–∞–º–∏
            }
        }

        Ok(())
    }

    /// –°–∫–∞–Ω–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    async fn scan_wallet_transactions(&self, wallet: &WalletModel) -> Result<()> {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞
        let transactions = self
            .tron_client
            .get_trc20_transactions(&wallet.address, &self.usdt_contract, 50)
            .await?;

        info!(
            "–ù–∞–π–¥–µ–Ω–æ {} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {}",
            transactions.len(),
            wallet.address
        );

        // –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ tx_hash –∏–∑ –ë–î
        let mut conn = self.db.get().await?;
        let known_hashes: Vec<String> = schema::incoming_transactions::table
            .filter(schema::incoming_transactions::wallet_id.eq(wallet.id))
            .select(schema::incoming_transactions::tx_hash)
            .load(&mut conn)
            .await?;

        let known_hashes: HashSet<String> = known_hashes.into_iter().collect();

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        for tx in transactions {
            if !known_hashes.contains(&tx.tx_hash) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤—Ö–æ–¥—è—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è (to = –Ω–∞—à –∫–æ—à–µ–ª–µ–∫)
                if tx.to_address.eq_ignore_ascii_case(&wallet.address) {
                    if let Err(e) = self.process_new_incoming_transaction(wallet, &tx).await {
                        error!("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {}: {}", tx.tx_hash, e);
                    }
                }
            }
        }

        Ok(())
    }

    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é –≤—Ö–æ–¥—è—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    async fn process_new_incoming_transaction(
        &self,
        wallet: &WalletModel,
        tx: &BlockchainTransaction,
    ) -> Result<()> {
        info!(
            "üì• –ù–æ–≤–∞—è –≤—Ö–æ–¥—è—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {} USDT –Ω–∞ –∫–æ—à–µ–ª–µ–∫ {} (tx: {})",
            tx.amount, wallet.address, tx.tx_hash
        );

        let mut conn = self.db.get().await?;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
        let status = if tx.confirmations >= 19 {
            // 19+ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π = –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
            TransactionStatus::Completed
        } else if tx.confirmations >= 1 {
            // 1+ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π = –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            TransactionStatus::Processing
        } else {
            // 0 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π = –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
            TransactionStatus::Pending
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        let new_transaction = NewIncomingTransaction {
            wallet_id: wallet.id,
            tx_hash: tx.tx_hash.clone(),
            block_number: tx.block_number,
            from_address: tx.from_address.clone(),
            to_address: tx.to_address.clone(),
            amount: decimal_to_bigdecimal(tx.amount),
            status: format!("{:?}", status),
            error_message: None,
        };

        diesel::insert_into(schema::incoming_transactions::table)
            .values(&new_transaction)
            .execute(&mut conn)
            .await?;

        // –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
        if status == TransactionStatus::Completed {
            self.update_wallet_balance(wallet.id, tx.amount).await?;

            info!(
                "‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ {} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {} USDT",
                wallet.address, tx.amount
            );
        }

        Ok(())
    }

    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞ - –±–∞–ª–∞–Ω—Å –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
    async fn update_wallet_balance(&self, _wallet_id: i64, _amount: Decimal) -> Result<()> {
        // –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ TronGrid API
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –ë–î –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        Ok(())
    }

    /// –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞
    pub async fn get_wallet_incoming_transactions(
        &self,
        wallet_id: i64,
    ) -> Result<Vec<IncomingTransactionModel>> {
        let mut conn = self.db.get().await?;

        let transactions = schema::incoming_transactions::table
            .filter(schema::incoming_transactions::wallet_id.eq(wallet_id))
            .order(schema::incoming_transactions::detected_at.desc())
            .load(&mut conn)
            .await?;

        Ok(transactions)
    }

    /// –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –≤—Ö–æ–¥—è—â–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º
    pub async fn get_monitoring_stats(&self) -> Result<MonitoringStats> {
        let mut conn = self.db.get().await?;

        // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        let total_transactions: i64 = schema::incoming_transactions::table
            .count()
            .get_result(&mut conn)
            .await?;

        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        let pending_count: i64 = schema::incoming_transactions::table
            .filter(schema::incoming_transactions::status.eq("Pending"))
            .count()
            .get_result(&mut conn)
            .await?;

        let processing_count: i64 = schema::incoming_transactions::table
            .filter(schema::incoming_transactions::status.eq("Processing"))
            .count()
            .get_result(&mut conn)
            .await?;

        let completed_count: i64 = schema::incoming_transactions::table
            .filter(schema::incoming_transactions::status.eq("Completed"))
            .count()
            .get_result(&mut conn)
            .await?;

        Ok(MonitoringStats {
            total_transactions,
            pending_count,
            processing_count,
            completed_count,
            monitoring_enabled: self.monitoring_enabled,
        })
    }
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
#[derive(Debug, Clone, serde::Serialize)]
pub struct MonitoringStats {
    pub total_transactions: i64,
    pub pending_count: i64,
    pub processing_count: i64,
    pub completed_count: i64,
    pub monitoring_enabled: bool,
}
