//! # –°–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
//!
//! –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ (monitoring, cleanup, etc.)

use anyhow::Result;
use std::sync::Arc;
use tokio::time::{interval, Duration};
use tracing::{error, info, warn};

use super::{TransactionMonitoringService, TransferService, WebhookService};

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
#[derive(Debug, Clone)]
pub struct SchedulerConfig {
    pub monitoring_interval_seconds: u64,
    pub transfer_processing_interval_seconds: u64,
    pub cleanup_interval_hours: u64,
    pub health_check_interval_minutes: u64,
}

impl Default for SchedulerConfig {
    fn default() -> Self {
        Self {
            monitoring_interval_seconds: 30,          // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫
            transfer_processing_interval_seconds: 60, // –û–±—Ä–∞–±–æ—Ç–∫–∞ pending –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            cleanup_interval_hours: 24,               // –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
            health_check_interval_minutes: 5,         // Health check –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        }
    }
}

/// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
pub struct TaskScheduler {
    config: SchedulerConfig,
    monitoring_service: Arc<TransactionMonitoringService>,
    transfer_service: Arc<TransferService>,
    webhook_service: Option<Arc<WebhookService>>,
}

impl TaskScheduler {
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    pub fn new(
        config: SchedulerConfig,
        monitoring_service: Arc<TransactionMonitoringService>,
        transfer_service: Arc<TransferService>,
        webhook_service: Option<Arc<WebhookService>>,
    ) -> Self {
        Self {
            config,
            monitoring_service,
            transfer_service,
            webhook_service,
        }
    }

    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    pub async fn start(&self) -> Result<()> {
        info!("üïí –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...");

        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tokio::try_join!(
            self.start_monitoring_task(),
            self.start_transfer_processing_task(),
            self.start_cleanup_task(),
            self.start_health_check_task()
        )?;

        Ok(())
    }

    /// –ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    async fn start_monitoring_task(&self) -> Result<()> {
        info!(
            "üì° –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {} —Å–µ–∫)",
            self.config.monitoring_interval_seconds
        );

        let mut interval = interval(Duration::from_secs(self.config.monitoring_interval_seconds));
        let monitoring_service = self.monitoring_service.clone();

        loop {
            interval.tick().await;

            if let Err(e) = monitoring_service.scan_for_incoming_transactions().await {
                error!("‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {}", e);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
            }
        }
    }

    /// –ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ pending —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤
    async fn start_transfer_processing_task(&self) -> Result<()> {
        info!(
            "‚öôÔ∏è  –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ pending —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {} —Å–µ–∫)",
            self.config.transfer_processing_interval_seconds
        );

        let mut interval = interval(Duration::from_secs(
            self.config.transfer_processing_interval_seconds,
        ));
        let transfer_service = self.transfer_service.clone();

        loop {
            interval.tick().await;

            if let Err(e) = transfer_service.process_pending_transfers().await {
                error!("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ pending —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤: {}", e);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
            }
        }
    }

    /// –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    async fn start_cleanup_task(&self) -> Result<()> {
        info!(
            "üßπ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {} —á–∞—Å–æ–≤)",
            self.config.cleanup_interval_hours
        );

        let mut interval = interval(Duration::from_secs(
            self.config.cleanup_interval_hours * 3600,
        ));

        loop {
            interval.tick().await;

            if let Err(e) = self.perform_cleanup().await {
                error!("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {}", e);
            }
        }
    }

    /// –ó–∞–¥–∞—á–∞ health check –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    async fn start_health_check_task(&self) -> Result<()> {
        info!(
            "üè• –ó–∞–ø—É—Å–∫ health check (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {} –º–∏–Ω—É—Ç)",
            self.config.health_check_interval_minutes
        );

        let mut interval = interval(Duration::from_secs(
            self.config.health_check_interval_minutes * 60,
        ));

        loop {
            interval.tick().await;

            if let Err(e) = self.perform_health_checks().await {
                warn!("‚ö†Ô∏è  Health check warnings: {}", e);
            }
        }
    }

    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    async fn perform_cleanup(&self) -> Result<()> {
        info!("üßπ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
        // - –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
        // - –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        // - –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        // - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ë–î

        // –ü—Ä–∏–º–µ—Ä: –æ—á–∏—Å—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π
        let cleanup_date = chrono::Utc::now() - chrono::Duration::days(90);

        info!(
            "–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ä—à–µ {} (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)",
            cleanup_date.format("%Y-%m-%d")
        );

        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É
        // let mut conn = self.monitoring_service.db.get().await?;
        // diesel::delete(...)

        info!("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
        Ok(())
    }

    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç health check –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    async fn perform_health_checks(&self) -> Result<()> {
        info!("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...");

        // Health check –¥–ª—è webhook
        if let Some(webhook_service) = &self.webhook_service {
            match webhook_service.health_check().await {
                Ok(true) => info!("‚úÖ Webhook —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç"),
                Ok(false) => warn!("‚ö†Ô∏è  Webhook —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"),
                Err(e) => warn!("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook: {}", e),
            }
        }

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏:
        // - TRON Grid API –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        // - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        // - –í–Ω–µ—à–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

        // –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        match self.monitoring_service.get_monitoring_stats().await {
            Ok(stats) => {
                info!(
                    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, {} pending",
                    stats.total_transactions, stats.pending_count
                );

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
                if stats.pending_count > 100 {
                    warn!(
                        "‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {}",
                        stats.pending_count
                    );
                }
            }
            Err(e) => warn!("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {}", e),
        }

        Ok(())
    }

    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–Ω—É –∏—Ç–µ—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –∑–∞–¥–∞—á (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    pub async fn run_once(&self) -> Result<()> {
        info!("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á...");

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if let Err(e) = self
            .monitoring_service
            .scan_for_incoming_transactions()
            .await
        {
            warn!("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {}", e);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤
        if let Err(e) = self.transfer_service.process_pending_transfers().await {
            warn!("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤: {}", e);
        }

        // Health check
        if let Err(e) = self.perform_health_checks().await {
            warn!("Health check: {}", e);
        }

        info!("‚úÖ –ò—Ç–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
        Ok(())
    }

    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    pub async fn get_scheduler_stats(&self) -> Result<SchedulerStats> {
        let monitoring_stats = self.monitoring_service.get_monitoring_stats().await?;

        Ok(SchedulerStats {
            monitoring_enabled: monitoring_stats.monitoring_enabled,
            total_transactions: monitoring_stats.total_transactions,
            pending_transactions: monitoring_stats.pending_count,
            config: self.config.clone(),
        })
    }
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
#[derive(Debug, Clone, serde::Serialize)]
pub struct SchedulerStats {
    pub monitoring_enabled: bool,
    pub total_transactions: i64,
    pub pending_transactions: i64,
    pub config: SchedulerConfig,
}

// –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å Serialize –¥–ª—è SchedulerConfig
impl serde::Serialize for SchedulerConfig {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        use serde::ser::SerializeStruct;
        let mut state = serializer.serialize_struct("SchedulerConfig", 4)?;
        state.serialize_field(
            "monitoring_interval_seconds",
            &self.monitoring_interval_seconds,
        )?;
        state.serialize_field(
            "transfer_processing_interval_seconds",
            &self.transfer_processing_interval_seconds,
        )?;
        state.serialize_field("cleanup_interval_hours", &self.cleanup_interval_hours)?;
        state.serialize_field(
            "health_check_interval_minutes",
            &self.health_check_interval_minutes,
        )?;
        state.end()
    }
}
