// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è dependency injection

use std::sync::Arc;

use crate::application::services::{
    FeeConfig, SponsorGasService, TransferService, TrxTransferService,
    UnifiedFeeService, WalletActivationService, WalletService,
};
use crate::config::Settings;
use crate::domain::tokens::TokenRegistry;
use crate::infrastructure::{
    database::create_db_pool, 
    TronGridClient, 
    TronWalletGenerator,
    tron::{Trc20TokenService, Trc20ServiceConfig},
};

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –≤—Å–µ–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
#[derive(Clone)]
pub struct AppState {
    pub wallet_service: Arc<WalletService>,
    pub transfer_service: Arc<TransferService>,
    pub fee_service: Arc<UnifiedFeeService>,
    pub trc20_service: Arc<Trc20TokenService>, // ü™ô –ù–æ–≤—ã–π –º—É–ª—å—Ç–∏—Ç–æ–∫–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
}

impl AppState {
    /// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    pub async fn new(settings: Settings) -> anyhow::Result<Self> {
        // 1. –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
        let db_pool = create_db_pool(&settings.database.url).await?;

        // 2. –°–æ–∑–¥–∞–µ–º TRON –∫–ª–∏–µ–Ω—Ç
        let tron_client = TronGridClient::new(settings.tron.clone());

        // 3. –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ—à–µ–ª—å–∫–æ–≤
        let wallet_generator = TronWalletGenerator::new();

        // 4. –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∫–æ–º–∏—Å—Å–∏–π
        let fee_config = FeeConfig {
            base_trx_per_transaction: settings.fees.trx_per_transaction,
            trx_to_usdt_rate: settings.fees.trx_to_usdt_rate,
            commission_percentage: settings.fees.commission_percentage,
            min_commission_usdt: settings.fees.min_commission_usdt,
            max_commission_usdt: settings.fees.max_commission_usdt,
            dynamic_fees_enabled: true, // –í–∫–ª—é—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏
            ..Default::default()
        };

        let fee_service = UnifiedFeeService::new(
            fee_config,
            tron_client.clone(),
            settings.tron.master_wallet_address.clone(),
        );

        // 5. –°–æ–∑–¥–∞–µ–º TRX transfer service –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–æ–≤
        let trx_transfer_service = TrxTransferService::new(tron_client.clone());

        // 6. –°–æ–∑–¥–∞–µ–º wallet activation service (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ)
        let wallet_activation_service = if settings.wallet.activation.enabled {
            Some(WalletActivationService::new(
                trx_transfer_service.clone(),
                settings.tron.master_wallet_address.clone(),
                settings.tron.master_wallet_private_key.clone(),
                settings.wallet.activation.amount,
                settings.wallet.activation.enabled,
            ))
        } else {
            None
        };

        let wallet_service = WalletService::new(
            db_pool.clone(),
            tron_client.clone(),
            wallet_generator,
            wallet_activation_service,
        );

        // 7. –°–æ–∑–¥–∞–µ–º sponsor gas service –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ TRX –¥–ª—è –≥–∞–∑–∞
        let sponsor_gas_service = SponsorGasService::new(
            tron_client.clone(),
            trx_transfer_service.clone(),
            rust_decimal::Decimal::new(15, 0), // 15.0 TRX
            true,                              // –≤–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            settings.tron.master_wallet_address.clone(),
            settings.tron.master_wallet_private_key.clone(),
        );

        let transfer_service = TransferService::new(
            db_pool.clone(),
            tron_client.clone(),
            fee_service.clone(),
            settings.tron.master_wallet_address.clone(),
            sponsor_gas_service,
        );

        // 8. –°–æ–∑–¥–∞–µ–º –º—É–ª—å—Ç–∏—Ç–æ–∫–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        let token_registry = TokenRegistry::new(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –±–∞–∑–æ–≤—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
        let trc20_service_config = Trc20ServiceConfig::default();
        let trc20_service = Trc20TokenService::new(
            settings.tron.clone(),
            trc20_service_config,
            token_registry,
        );

        Ok(Self {
            wallet_service: Arc::new(wallet_service),
            transfer_service: Arc::new(transfer_service),
            fee_service: Arc::new(fee_service),
            trc20_service: Arc::new(trc20_service),
        })
    }
}
