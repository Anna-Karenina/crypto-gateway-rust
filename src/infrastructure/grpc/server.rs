//! # gRPC —Å–µ—Ä–≤–µ—Ä
//!
//! –û—Å–Ω–æ–≤–Ω–æ–π gRPC —Å–µ—Ä–≤–µ—Ä –¥–ª—è TRON Gateway

use std::sync::Arc;
use tonic::transport::Server;
use tracing::info;

use crate::application::state::AppState;
use crate::config::GrpcConfig;

use super::generated::{
    transfer::transfer_service_server::TransferServiceServer,
    wallet::wallet_service_server::WalletServiceServer,
};
use super::services::{GrpcTransferService, GrpcWalletService};

/// gRPC —Å–µ—Ä–≤–µ—Ä
pub struct GrpcServer {
    config: GrpcConfig,
    app_state: Arc<AppState>,
}

impl GrpcServer {
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π gRPC —Å–µ—Ä–≤–µ—Ä
    pub fn new(config: GrpcConfig, app_state: Arc<AppState>) -> Self {
        Self { config, app_state }
    }

    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç gRPC —Å–µ—Ä–≤–µ—Ä
    pub async fn serve(self) -> anyhow::Result<()> {
        if !self.config.enabled {
            info!("gRPC —Å–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
            return Ok(());
        }

        let addr = format!("{}:{}", self.config.host, self.config.port).parse()?;

        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        let wallet_service = GrpcWalletService::new(self.app_state.clone());
        let transfer_service = GrpcTransferService::new(self.app_state.clone());

        info!("üöÄ gRPC —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ {}", addr);

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Å –Ω–∞—à–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
        Server::builder()
            .add_service(WalletServiceServer::new(wallet_service))
            .add_service(TransferServiceServer::new(transfer_service))
            .serve(addr)
            .await?;

        Ok(())
    }

    /// –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
    pub fn address(&self) -> String {
        format!("{}:{}", self.config.host, self.config.port)
    }
}
