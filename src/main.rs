use actix_web::{middleware::Logger, web, App, HttpServer};
use anyhow::Result;
use std::sync::Arc;
use tracing::{info, Level};
use tracing_subscriber::FmtSubscriber;

use tron_gateway_rust::{
    infrastructure::{grpc::GrpcServer, http::configure_routes},
    AppState, Settings, VERSION,
};

#[actix_web::main]
async fn main() -> Result<()> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    let subscriber = FmtSubscriber::builder()
        .with_max_level(Level::INFO)
        .finish();

    tracing::subscriber::set_global_default(subscriber)?;

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ config.toml –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    let settings =
        Settings::new().map_err(|e| anyhow::anyhow!("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {}", e))?;
    info!("üöÄ TRON Gateway v{} –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...", VERSION);
    info!("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ config.toml –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
    info!(
        "HTTP —Å–µ—Ä–≤–µ—Ä: {}:{}",
        settings.server.host, settings.server.port
    );
    info!(
        "gRPC —Å–µ—Ä–≤–µ—Ä: {} ({}:{})",
        if settings.grpc.enabled {
            "–≤–∫–ª—é—á–µ–Ω"
        } else {
            "–æ—Ç–∫–ª—é—á–µ–Ω"
        },
        settings.grpc.host,
        settings.grpc.port
    );

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ë–î, —Å–µ—Ä–≤–∏—Å—ã)
    let app_state = Arc::new(AppState::new(settings.clone()).await?);
    info!("–°–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");

    // –ó–∞–ø—É—Å–∫ –æ–±–æ–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    let http_bind = format!("{}:{}", settings.server.host, settings.server.port);
    let grpc_bind = format!("{}:{}", settings.grpc.host, settings.grpc.port);

    info!("üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ {}", http_bind);
    if settings.grpc.enabled {
        info!("‚ö° gRPC —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ {}", grpc_bind);
    }

    // –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
    let app_state_http = app_state.clone();
    let http_server = async move {
        HttpServer::new(move || {
            App::new()
                .app_data(web::Data::new((*app_state_http).clone()))
                .wrap(Logger::default())
                .configure(configure_routes)
        })
        .bind(&http_bind)?
        .run()
        .await
        .map_err(anyhow::Error::from)
    };

    // –°–æ–∑–¥–∞–µ–º gRPC —Å–µ—Ä–≤–µ—Ä
    let grpc_server = async {
        if settings.grpc.enabled {
            let grpc_server = GrpcServer::new(settings.grpc.clone(), app_state.clone());
            grpc_server.serve().await?;
        }
        Ok::<(), anyhow::Error>(())
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    tokio::try_join!(http_server, grpc_server)?;

    Ok(())
}
